//My
#include "DetectorConstruction.hh"
#include "SensitiveDetector.hh"

//G4
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4Trd.hh"
#include "G4Trap.hh"
#include "G4Torus.hh"
#include "G4Trap.hh"
#include "G4ExtrudedSolid.hh"
#include "G4VSolid.hh"
#include "G4UnionSolid.hh"
#include "G4SubtractionSolid.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4RotationMatrix.hh"
#include "G4Transform3D.hh"
#include "G4PVPlacement.hh"
#include "G4AssemblyVolume.hh"
#include "G4VisAttributes.hh"
#include "G4OpticalSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4Color.hh"
#include "G4TwoVector.hh"
#include "G4SDManager.hh"
#include "globals.hh"
//magnetic field
#include "G4FieldManager.hh"
#include "G4TransportationManager.hh"
#include "G4ChordFinder.hh"
#include "G4UserLimits.hh"
//GDML
//#include <G4GDMLParser.hh>

//root 
#include "TMath.h"

DetectorConstruction::DetectorConstruction()
{
  //magField = new MagneticField();
  worldVisAtt = new G4VisAttributes();
  quartzVisAtt = new G4VisAttributes();
  sensitiveVisAtt = new G4VisAttributes();
  pmtboxVisAtt = new G4VisAttributes();
  absVisAtt = new G4VisAttributes();
  // Define Materials to be used
  DefineMaterials();
}

DetectorConstruction::~DetectorConstruction()
{
  //delete magField;
  delete worldVisAtt;
  delete quartzVisAtt;
  delete sensitiveVisAtt;
  delete pmtboxVisAtt;
  delete absVisAtt;

  delete stepLimit;
}

void DetectorConstruction::DefineMaterials()
{
  G4String symbol;
  G4double a, z, density;
  G4int ncomponents, natoms;
  G4double fractionmass;

  // Define elements
  //G4Element* H = 
  //new G4Element("Hydrogen", symbol = "H", z = 1., a = 1.01*g/mole);
  G4Element* C = 
    new G4Element("Carbon", symbol = "C", z = 6., a = 12.01*g/mole);
  G4Element* N = 
    new G4Element("Nitrogen", symbol = "N", z = 7., a = 14.01*g/mole);
  G4Element* O =
    new G4Element("Oxygen", symbol = "O", z = 8., a = 16.00*g/mole);
  G4Element* Si = 
    new G4Element("Silicon", symbol = "Si", z = 14., a = 28.09*g/mole);
  G4Element* Al = 
    new G4Element("Aluminum", symbol = "Al", z = 13., a = 26.98*g/mole);

  // Quartz Material (SiO2)
  G4Material* SiO2 = 
    new G4Material("quartz", density = 2.200*g/cm3, ncomponents = 2);
  SiO2->AddElement(Si, natoms = 1);
  SiO2->AddElement(O , natoms = 2);

  // Quartz Material (SiO2_cladd)
  G4Material* SiO2_cladd = 
    new G4Material("quartzCladd", density = 2.200*g/cm3, ncomponents = 2);
  SiO2_cladd->AddElement(Si, natoms = 1);
  SiO2_cladd->AddElement(O , natoms = 2);
  
  // Air
  G4Material* Air = 
    new G4Material("Air", density = 1.290*mg/cm3, ncomponents = 2);
  //G4Material* Air = 
  //new G4Material("Air", density = 0.000290*mg/cm3, ncomponents = 2);
  Air->AddElement(N, fractionmass = 0.7);
  Air->AddElement(O, fractionmass = 0.3);

  // Aluminum
  G4Material* Aluminum =
    new G4Material("Aluminum", density = 2.7*g/cm3, ncomponents = 1);
  Aluminum->AddElement(Al, fractionmass = 1.0);

  // Assign Materials
  world.material = Air;
  sec.material = SiO2;
  sec2.material = SiO2;
  secTorr.material = SiO2;
  sec_cladd.material = SiO2_cladd;
  sec2_cladd.material = SiO2_cladd;
  secTorr_cladd.material = SiO2_cladd;
  //sensitive.material = sec.material;
  sensitive.material = Aluminum;
  //pmtWin1.material = sec.material;
  //pmtWin2.material = sec.material;  
  //pmtAbs1.material = Aluminum;
  abs1.material = Aluminum;
  absL.material = Aluminum;
  absR.material = Aluminum;
  absT.material = Aluminum;
  absB.material = Aluminum;
  absTrap.material = Aluminum;
  sec_Coating.material = Aluminum;
  sec2_Coating.material = Aluminum;
  secTorr_Coating.material = Aluminum;
  //abs2.material = Aluminum;
  //sensitive.material = Aluminum;
  //pmtbox.material = Aluminum;
  //abs1.material = Aluminum;
  //abs2.material = Aluminum;

  //
  // Generate and Add Material Properties Table
  //						
  const G4int num = 36;
  G4double WaveLength[num];
  G4double Absorption[num];      // Default value for absorption
  G4double AirAbsorption[num];
  G4double AirRefractiveIndex[num];
  G4double PhotonEnergy[num];

  // Absorption of quartz per 1m
  G4double QuartzAbsorption[num] =
    {0.999572036,0.999544661,0.999515062,0.999483019,0.999448285,
     0.999410586,0.999369611,0.999325013,0.999276402,0.999223336,
     0.999165317,0.999101778,0.999032079,0.998955488,0.998871172,
     0.998778177,0.99867541 ,0.998561611,0.998435332,0.998294892,
     0.998138345,0.997963425,0.997767484,0.997547418,0.99729958 ,
     0.99701966 ,0.99670255 ,0.996342167,0.995931242,0.995461041,
     0.994921022,0.994298396,0.993577567,0.992739402,0.991760297,
     0.990610945};

  for (int i=0; i<num; i++) {
    WaveLength[i] = (300 + i*10)*nanometer;
    Absorption[i] = 100*m;      // Fake number for no absorption
    AirAbsorption[i] = 4.*cm;   // If photon hits air, kill it
    AirRefractiveIndex[i] = 1.;
    PhotonEnergy[num - (i+1)] = twopi*hbarc/WaveLength[i];
    /* Absorption is given per length and G4 needs mean free path
       length, calculate it here
       mean free path length - taken as probablility equal 1/e
       that the photon will be absorbed */
    QuartzAbsorption[i] = (-1)/log(QuartzAbsorption[i])*100*cm;
    //EpotekAbsorption[i] = (-1)/log(EpotekAbsorption[i])*
    //epotekBarJoint.thickness;
  }

  G4double QuartzRefractiveIndex[num] =
    {1.456535,1.456812,1.4571  ,1.457399,1.457712,1.458038,
     1.458378,1.458735,1.459108,1.4595  ,1.459911,1.460344,
     1.460799,1.46128 ,1.461789,1.462326,1.462897,1.463502,
     1.464146,1.464833,1.465566,1.46635 ,1.46719 ,1.468094,
     1.469066,1.470116,1.471252,1.472485,1.473826,1.475289,
     1.476891,1.478651,1.480592,1.482739,1.485127,1.487793};

  G4double CladdingRefractiveIndex[num];

  for(int i=0; i<num; i++){
    CladdingRefractiveIndex[i] = TMath::Sqrt(QuartzRefractiveIndex[i]*QuartzRefractiveIndex[i]-0.22*0.22); 
    //CladdingRefractiveIndex[i] = 1.0;
  }

  // Assign absorption and refraction to materials

  // Quartz
  G4MaterialPropertiesTable* QuartzMPT = new G4MaterialPropertiesTable();
  QuartzMPT->AddProperty("RINDEX", PhotonEnergy, QuartzRefractiveIndex, num);
  QuartzMPT->AddProperty("ABSLENGTH", PhotonEnergy, QuartzAbsorption, num);
  
  // Cladding (of the fiber) only for the fiber aplication
  G4MaterialPropertiesTable* CladdingMPT = new G4MaterialPropertiesTable();
  CladdingMPT->AddProperty("RINDEX", PhotonEnergy, CladdingRefractiveIndex, num);
  CladdingMPT->AddProperty("ABSLENGTH", PhotonEnergy, QuartzAbsorption, num);

  // Assign this material to the bars
  sec.material->SetMaterialPropertiesTable(QuartzMPT);
  sec_cladd.material->SetMaterialPropertiesTable(CladdingMPT);

  // Air
  G4MaterialPropertiesTable* AirMPT = new G4MaterialPropertiesTable();
  AirMPT->AddProperty("RINDEX", PhotonEnergy, AirRefractiveIndex, num);
  AirMPT->AddProperty("ABSLENGTH", PhotonEnergy, AirAbsorption, num);
  
  // Assign these properties to the world volume
  world.material->SetMaterialPropertiesTable(AirMPT);

}

G4VPhysicalVolume* DetectorConstruction::Construct()
{

  // 
  // Define World Volume
  //
  world.solid = new G4Box("World",
			  world.sizeX/2,
			  world.sizeY/2,
			  world.sizeZ/2);

  world.logical = new G4LogicalVolume(world.solid,
				      world.material,
				      "World");
  
  world.physical = new G4PVPlacement(0,
				     G4ThreeVector(),
				     world.logical,
				     "World",
				     0,
				     false,
				     0);

  //
  // Define detector
  //
  /// normal geometrty (with finger)///
  sec.solid = new G4Box("Sector", sec.sizeX/2.0, sec.sizeY/2.0, sec.sizeZ/2.0);
  //tube
  //sec.solid = new G4Tubs("Sector", 0.0, sec.sizeY/2.0, sec.sizeX/2.0, 0, 360.0*deg);
  sec.logical = new G4LogicalVolume(sec.solid, sec.material, "Sector");
  
  //
  // Sensitive volume
  //
  // box
  sensitive.solid = new G4Box("Sensitive", sensitive.sizeX/2.0, sensitive.sizeY/2.0, sensitive.sizeZ/2.0);
  //tube
  //sensitive.solid = new G4Tubs("Sensitive", 0.0, sec.sizeY/2.0, sensitive.sizeZ/2.0, 0, 360.0*deg);
  sensitive.logical = new G4LogicalVolume(sensitive.solid, sensitive.material,"Sensitive");

  //
  // Absorber
  //
  G4double absL_sizeX = UA9Const::barSizeX*UA9Const::absPepcent1;
  G4double absL_sizeY = UA9Const::barSizeY*UA9Const::absPepcent2;
  G4double absL_sizeZ = UA9Const::barSizeZ*UA9Const::absPepcent2;
  absL.solid = new G4Box("absL", absL_sizeX/2.0, absL_sizeY/2.0, absL_sizeZ/2.0);
  absR.solid = new G4Box("absR", absL_sizeX/2.0, absL_sizeY/2.0, absL_sizeZ/2.0);
  absT.solid = new G4Box("absT", absL_sizeX/2.0, absL_sizeY/2.0, absL_sizeZ/2.0);
  absB.solid = new G4Box("absB", absL_sizeX/2.0, absL_sizeY/2.0, absL_sizeZ/2.0);
  absL.logical = new G4LogicalVolume(absL.solid, absL.material,"absL");
  absR.logical = new G4LogicalVolume(absR.solid, absR.material,"absR");
  absT.logical = new G4LogicalVolume(absT.solid, absT.material,"absT");
  absB.logical = new G4LogicalVolume(absB.solid, absB.material,"absB");

  //-------------------------------------------------------

  G4AssemblyVolume* secAssembly = new G4AssemblyVolume();

  //--------------------------------------------------------

  G4RotationMatrix Ra;
  G4ThreeVector Ta;
  G4Transform3D Tr;

  //
  //add sensitive
  //
  Ta.setX(0.0);
  Ta.setY(0.0);
  Ta.setZ(UA9Const::barSizeX/2.0 + UA9Const::senDetZ/2.0);
  Tr = G4Transform3D(Ra, Ta);
  secAssembly->AddPlacedVolume(sensitive.logical, Tr);

  //
  //add sec
  //
  Ta.setX(0.0);
  Ta.setY(0.0);
  Ta.setZ(0.0);
  //in case of finger
  Ra.rotateY(90.0*deg);
  Tr = G4Transform3D(Ra, Ta);
  secAssembly->AddPlacedVolume(sec.logical, Tr);
  //in case of finger
  Ra.rotateY(-90.0*deg);

  //
  // absorber
  //
  Ra.rotateY(90.0*deg);
  Ta.setX(UA9Const::barSizeY/2.0 + absL_sizeY/2.0);
  Ta.setY(0.0);
  Ta.setZ(UA9Const::barSizeX/2.0 - absL_sizeX/2.0);
  Tr = G4Transform3D(Ra, Ta);
  //secAssembly->AddPlacedVolume(absL.logical, Tr);
  Ta.setX(-UA9Const::barSizeY/2.0 - absL_sizeY/2.0);
  Ta.setY(0.0);
  Ta.setZ(UA9Const::barSizeX/2.0 - absL_sizeX/2.0);
  Tr = G4Transform3D(Ra, Ta);
  //secAssembly->AddPlacedVolume(absR.logical, Tr);
  Ta.setX(0.0);
  Ta.setY(UA9Const::barSizeY/2.0 + absL_sizeY/2.0);
  Ta.setZ(UA9Const::barSizeX/2.0 - absL_sizeX/2.0);
  Tr = G4Transform3D(Ra, Ta);
  //secAssembly->AddPlacedVolume(absT.logical, Tr);
  Ta.setX(0.0);
  Ta.setY(-UA9Const::barSizeY/2.0 - absL_sizeY/2.0);
  Ta.setZ(UA9Const::barSizeX/2.0 - absL_sizeX/2.0);
  Tr = G4Transform3D(Ra, Ta);
  //secAssembly->AddPlacedVolume(absB.logical, Tr);
  Ra.rotateY(-90.0*deg);


  //
  //make Imprint
  //
  Ta.setX(0.0);
  Ta.setY(0.0);
  Ta.setZ(0.0);
  Tr = G4Transform3D(Ra, Ta);
  G4cout<<" 1 "<<G4endl;
  secAssembly->MakeImprint(world.logical, Tr, 0, true);

  //
  // Set Visualization Attributes
  //
  G4Color blue        = G4Color(0., 0., 1.);
  G4Color green       = G4Color(0., 1., 0.);
  G4Color red         = G4Color(1., 0., 0.);
  G4Color white       = G4Color(1., 1., 1.);
  G4Color cyan        = G4Color(0., 1., 1.);
  G4Color DircColor   = G4Color(0.0, 0.0, 1.0, 0.2);
  G4Color SensColor   = G4Color(0.0, 1.0, 1.0, 0.1);

  worldVisAtt->SetColor(white);
  worldVisAtt->SetVisibility(true);
  quartzVisAtt->SetColor(DircColor);
  quartzVisAtt->SetVisibility(true);
  sensitiveVisAtt->SetColor(SensColor);
  sensitiveVisAtt->SetVisibility(true);
  absVisAtt->SetColor(red);
  absVisAtt->SetVisibility(true);

  world.logical->SetVisAttributes(worldVisAtt);
  sec.logical->SetVisAttributes(quartzVisAtt);
  sensitive.logical->SetVisAttributes(sensitiveVisAtt);
  absL.logical->SetVisAttributes(absVisAtt);
  absR.logical->SetVisAttributes(absVisAtt);
  absT.logical->SetVisAttributes(absVisAtt);
  absB.logical->SetVisAttributes(absVisAtt);

  //
  // Define Optical Borders
  //

  // Surface for killing photons at borders
  const G4int num1 = 2;
  G4double Ephoton[num1] = {1.5*eV, 5.8*eV};

  G4OpticalSurface* OpVolumeKillSurface =
    new G4OpticalSurface("VolumeKillSurface");
  OpVolumeKillSurface->SetType(dielectric_metal);
  OpVolumeKillSurface->SetFinish(polished);
  OpVolumeKillSurface->SetModel(glisur);

  G4double ReflectivityKill[num1] = {0., 0.};
  G4double EfficiencyKill[num1] = {1., 1.};
  G4MaterialPropertiesTable* VolumeKill = new G4MaterialPropertiesTable();
  VolumeKill->AddProperty("REFLECTIVITY", Ephoton, ReflectivityKill, num1);
  VolumeKill->AddProperty("EFFICIENCY",   Ephoton, EfficiencyKill,   num1);
  OpVolumeKillSurface->SetMaterialPropertiesTable(VolumeKill);
  new G4LogicalSkinSurface("SensitiveSurface", 
			   sensitive.logical, OpVolumeKillSurface);
  
  
  // 
  // Sensitive detector definition
  //
  G4SDManager* SDman = G4SDManager::GetSDMpointer();
  SensitiveDetector* aSD = new SensitiveDetector("fTOF");
  SDman->AddNewDetector(aSD);
  //sensitive.logical->SetSensitiveDetector(aSD);
  
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;


  //G4double maxStep   = 0.1*mm;
  G4double maxStep   = 20.0*mm;
  G4double maxLength = 5.0*m;
  G4double maxTime   = 20.0*ns; 
  G4double minEkin   = 1.0/100*MeV;
  G4double mionRang  = 0.01*mm;
  stepLimit = new G4UserLimits(maxStep,maxLength,maxTime,minEkin,mionRang);
  sec.logical->SetUserLimits(stepLimit);


  //G4GDMLParser parser;
  //parser.Write("file.gdml", world.physical);

  return world.physical;
}
